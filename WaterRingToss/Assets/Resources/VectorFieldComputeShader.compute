#pragma kernel CSMain

RWStructuredBuffer<float3> vectorField;
RWStructuredBuffer<float3> newVectorField;

uint3 fieldDimensions;
float3 positionStep;

bool isJetActive;
float3 jetLocalPosition;
float jetRadius;
float3 jetForce;

static float waveTransferRate = 0.71f;
static float waveRelaxRate = 0.975f;


float3 FlipEdge(uint3 id, float3 self);
float Angle(float3 v1, float3 v2);
float3x3 AngleAxis3x3(float angle, float3 axis);


[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // get current v index
    int selfIndex = id.x * (fieldDimensions.y * fieldDimensions.z) + id.y * fieldDimensions.z + id.z;
    // local vector pos
    float3 selfPos = float3(    positionStep.x * 0.5f + id.x * positionStep.x,
                                positionStep.y * 0.5f + id.y * positionStep.y,
                                positionStep.z * 0.5f + id.z * positionStep.z );


    // position local to jet
    float3 localToJet = jetLocalPosition - selfPos;
    // distance to jet
    float distanceToJet = length(localToJet);
    
    // Vector affected by jet
    if ( (distanceToJet < jetRadius)  && isJetActive ) 
    {
        float multiplier = distanceToJet / jetRadius;
        
        float3 summVector = jetForce * multiplier;//(normalize(localToJet * -1) * length(jetForce)) * 0.5f * multiplier;

        newVectorField[selfIndex] = summVector;
        
        return;
    } 
    


    // Vector not affected by jet
    {
        // flip vector, if at edge
        // x
        float3 self = vectorField[selfIndex];

        float3 summAddProjectedNeigh = float3(0,0,0);
        float neighAddCounter = 0;

        float3 summSubProjectedNeigh = float3(0,0,0);
        float neighSubCounter = 0;

        for (uint i=0; i<27; i++)
        {
            if (i==13)
                i++;
            
            // neighbor delta indices
            int x = i / 9;
            int y = (i - (x * 9)) / 3;
            int z = i % 3;
            int3 neighborFieldPos = int3(id.x + (x-1), id.y + (y-1), id.z + (z-1));

            if ( (neighborFieldPos.x < 0) || (neighborFieldPos.x >= (int)fieldDimensions.x) ||
                 (neighborFieldPos.y < 0) || (neighborFieldPos.y >= (int)fieldDimensions.y) ||
                 (neighborFieldPos.z < 0) || (neighborFieldPos.z >= (int)fieldDimensions.z) )
                continue;

            int neighborIndex = (neighborFieldPos.x * (fieldDimensions.y * fieldDimensions.z)) + (neighborFieldPos.y * fieldDimensions.z) + neighborFieldPos.z;
            float3 neighSelf = vectorField[neighborIndex];

            float3 neighborPos = float3(    positionStep.x * 0.5f + neighborFieldPos.x * positionStep.x,
                                            positionStep.x * 0.5f + neighborFieldPos.y * positionStep.y,
                                            positionStep.x * 0.5f + neighborFieldPos.z * positionStep.z );
            
            // if neighbor is aimed at self
            float3 posNeighToSelfNorm = normalize(selfPos - neighborPos);
            float dotProductN = dot(neighSelf, posNeighToSelfNorm);
            if ( (dotProductN > 0) )
            {
                float3 projectedNeigh = dotProductN * posNeighToSelfNorm;
                summAddProjectedNeigh += projectedNeigh;
                neighAddCounter += 1;
            }

            // if self is aimed at neighbor
            float3 posSelfToNeighfNorm = normalize(neighborPos - selfPos);
            float dotProductS = dot(self, posSelfToNeighfNorm);
            if ( (dotProductS > 0) )
            {
                float3 projectedSelf = dotProductS * posSelfToNeighfNorm;
                summSubProjectedNeigh += projectedSelf;
                neighSubCounter += 1;
            }
        }

        float3 averageAdd = float3(0,0,0);
        if (neighAddCounter > 0)
        {
            averageAdd = summAddProjectedNeigh / neighAddCounter;
        }

        float3 averageSub = float3(0,0,0);
        if (neighSubCounter > 0)
        {
            averageSub = summSubProjectedNeigh / neighSubCounter;
        }

        float3 diff = (averageAdd - averageSub) * waveTransferRate;
            
        float3 result = self + diff;

        result = FlipEdge(id, result);
                
        newVectorField[selfIndex] = result * waveRelaxRate;
    }
}

// Mirror vector if at the edge of the vector field
float3 FlipEdge(uint3 id, float3 self)
{
    float revMult = -0.7f;

    //x
    if (((id.x == 0) && (self.x < 0)) ||
        ((id.x >= (fieldDimensions.x-1)) && (self.x > 0)) )
        self.x *= revMult;

    // y
    if (((id.y == 0) && (self.y < 0)) ||
        ((id.y >= (fieldDimensions.y-1)) && (self.y > 0)) )
        self.y *= revMult;

    // z
    if (((id.z == 0) && (self.z < 0)) ||
        ((id.z >= (fieldDimensions.z-1)) && (self.z > 0)) )
        self.z *= revMult;


    return self;
}

// Angle between vectors
float Angle(float3 v1, float3 v2)
{
	float dotProduct = dot(v1, v2);

	// Calculate the lengths of V1 and V2
	float lenV1 = length(v1);
	float lenV2 = length(v2);

	// Calculate the angle between the vectors in degrees
    float angle = acos(dotProduct / (lenV1 * lenV2)) * 57.2958f;

	return angle;
}

// Rotation with angle (in degress) and axis
float3x3 AngleAxis3x3(float angle, float3 axis)
{
    angle = angle * 0.0174533f;

    float c, s;
    sincos(angle, s, c);

    float t = 1 - c;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    return float3x3(
        t * x * x + c,      t * x * y - s * z,  t * x * z + s * y,
        t * x * y + s * z,  t * y * y + c,      t * y * z - s * x,
        t * x * z - s * y,  t * y * z + s * x,  t * z * z + c
    );
}